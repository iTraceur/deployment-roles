---
# Tests for download strategy
- name: Given no previous deploy with download strategy
  hosts: all
  vars:
    ansistrano_deploy_to: "/tmp/download/my-app.com"
  tasks:
    - name: Assert ansistrano_deploy_to path does not exist
      stat:
        path: "{{ ansistrano_deploy_to }}"
      register: st
    - debug:
        msg: "Path does not exist and is a directory"
      when: st.stat.exists is defined and not st.stat.exists

- name: When deploying using download strategy
  hosts: all
  vars:
    ansistrano_deploy_via: "download_unarchive"
    ansistrano_get_url: https://github.com/ansistrano/deploy/archive/master.zip
    ansistrano_deploy_to: "/tmp/download/my-app.com"
  roles:
    - { role: local-ansistrano }

- name: Then a successful deploy with download strategy should be done
  hosts: all
  vars:
    ansistrano_deploy_to: "/tmp/download/my-app.com"
  tasks:
    - name: Assert ansistrano_deploy_to path does exist
      stat:
        path: "{{ ansistrano_deploy_to }}"
      register: st
    - debug:
        msg: "Path exists and is a directory"
      when: st.stat.exists is defined and st.stat.exists

- name: And I should be able to do a second deploy
  hosts: all
  vars:
    ansistrano_deploy_via: "download_unarchive"
    ansistrano_get_url: https://github.com/ansistrano/deploy/archive/master.zip
    ansistrano_deploy_to: "/tmp/download/my-app.com"
  roles:
    - { role: local-ansistrano }

- name: When deploying using download strategy and setting owner and group user
  hosts: all
  vars:
    ansistrano_deploy_via: "download_unarchive"
    ansistrano_get_url: https://github.com/ansistrano/deploy/archive/master.zip
    ansistrano_deploy_to: "/tmp/download/nobody"
    ansistrano_unarchive_owner: "unarchive_user"
    ansistrano_unarchive_group: "unarchive_group"
  roles:
    - { role: local-ansistrano }
  pre_tasks:
    - name: Create group to use in the test
      group:
        name: unarchive_group
        state: present

    - name: Create user to use in the test
      user:
        name: unarchive_user
        uid: 6666
        groups: unarchive_group

  post_tasks:
    - name: Assert ansistrano_release_path.stdout/deploy-master is owned by unarchive_user
      stat:
        path: "{{ ansistrano_release_path.stdout }}/deploy-master"
      register: st
    - debug:
        msg: "ansistrano_release_path.stdout/deploy-master is owned by unarchive_user"
      when: st.stat.gr_name == "unarchive_group" and st.stat.pw_name == "unarchive_user"

- name: When deploying using download strategy and setting owner (expect fail)
  hosts: all
  vars:
    ansistrano_deploy_via: "download_unarchive"
    ansistrano_get_url: https://github.com/ansistrano/deploy/archive/master.zip
    ansistrano_deploy_to: "/tmp/download/fail"
    ansistrano_unarchive_owner: "unarchive_user"
  ignore_errors: yes
  roles:
    - { role: local-ansistrano }
  post_tasks:
    - name: Assert ansistrano_release_path.stdout/deploy-master does not exist
      stat:
        path: "{{ ansistrano_release_path.stdout }}/deploy-master"
      register: st
    - debug:
        msg: "ansistrano_release_path.stdout/deploy-master does not exist"
      when: st.stat.exists is sameas false
